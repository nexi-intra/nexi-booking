name: Canary Release

on:
  push:
    branches:
      - canary
env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository}}-web
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile.web
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/$(basename ${{ github.repository }}):canary

    #   - name: Generate Kubernetes manifest
    #     run: |
    #       cat <<EOF > deployment.yml
    #       apiVersion: apps/v1
    #       kind: Deployment
    #       metadata:
    #         name: myapp-canary
    #         labels:
    #           app: myapp
    #       spec:
    #         replicas: 1
    #         selector:
    #           matchLabels:
    #             app: myapp
    #         template:
    #           metadata:
    #             labels:
    #               app: myapp
    #           spec:
    #             containers:
    #             - name: myapp
    #               image: ghcr.io/${{ github.repository_owner }}/$(basename $GITHUB_REPOSITORY):canary
    #               ports:
    #               - containerPort: 80
    #       EOF
    #     shell: bash

    #   - name: Log in to Azure CLI
    #     uses: azure/login@v1
    #     with:
    #       creds: ${{ secrets.AZURE_CREDENTIALS }}

    #   - name: Set AKS context
    #     run: |
    #       az aks get-credentials --resource-group ${{ secrets.AZURE_RG }} --name ${{ secrets.AZURE_AKS }}

    #   - name: Deploy to AKS
    #     run: |
    #       kubectl apply -f deployment.yml
